#include <BigNum/BigNum.hpp>
#include <chrono>
#include <iostream>
#include <string>
#include <tuple>

using namespace bignum::literals;

std::tuple<bignum::BigNum, bignum::BigNum, bignum::BigNum>
binarySplit(int32_t a, int32_t b)
{
    bignum::BigNum Pab, Qab, Rab;
    if (b == a + 1)
    {
        Pab = -(6_BN * a - 5) * (2_BN * a - 1) * (6_BN * a - 1);
        Qab = "10939058860032000"_BN * a * a * a;
        Rab = Pab * (545140134_BN * a + 13591409);
    }
    else
    {
        auto m{ (a + b) / 2 };
        auto [Pam, Qam, Ram]{ binarySplit(a, m) };
        auto [Pmb, Qmb, Rmb]{ binarySplit(m, b) };

        Pab = Pam * Pmb;
        Qab = Qam * Qmb;
        Rab = Qmb * Ram + Pam * Rmb;
    }
    return std::make_tuple(Pab, Qab, Rab);
}

int main()
{
    bignum::BigNum::setMinimalPrecision(1002);
    bignum::BigNum koeff{
        "42698670."
        "6663333958177128891606596082733208840025090828008380071788526051"
        "5745759421630179991145566860134573716749408041139229273618126672"
        "8193136882170582563460066798766483460795735983552333985484854583"
        "2762473774912507545850325782197456759912124003920153233212768354"
        "4629648583735569730601212345875804914321664042742354797851044822"
        "1162836911053807235838159872646304853335987865686269706977445355"
        "8355991335396786419023123915238298774811088986646222490060213312"
        "3640475004317852138580294466285566561287664084990866080668477800"
        "2991357625433646133139055099023131780968145833996701200122389012"
        "1544217243622840686293294200505214190159390925699071943400294444"
        "3395184862976639746550589509887267697068804437271525728023522738"
        "2872383401509275515634457705197803145721985414408323372552767448"
        "5625623883182211963677365447450162580542514340846860388028410609"
        "1141850281570498384133143209516156684442922928123623464567026873"
        "4321517159131712143438348676514584576378735574108814073595022482"
        "2617863059170606823963307568928054734494021432772379319635163694"
        "3568535236509248454194246209288387776349711384018983557918804101"
        "5469199214591024464903812082236674251398135427633950703414918564"
        "3985359024518359633292259930946209967761946001470275187859964324"
        "74421329"
    };
    auto start{ std::chrono::high_resolution_clock::now() };
    auto [P1n, Q1n, R1n]{ binarySplit(1, 80) };
    auto pi{ (koeff * Q1n) / (13591409 * Q1n + R1n) };
    auto stop{ std::chrono::high_resolution_clock::now() };
    auto duration{ std::chrono::duration_cast<std::chrono::milliseconds>(
        stop - start) };
    std::cout << "Took " << duration.count() << " milliseconds"
              << std::endl;
    auto piStr{ (std::string)pi };
    auto actualPiStr{
        "3."
        "1415926535897932384626433832795028841971693993751058209749445923"
        "0781640628620899862803482534211706798214808651328230664709384460"
        "9550582231725359408128481117450284102701938521105559644622948954"
        "9303819644288109756659334461284756482337867831652712019091456485"
        "6692346034861045432664821339360726024914127372458700660631558817"
        "4881520920962829254091715364367892590360011330530548820466521384"
        "1469519415116094330572703657595919530921861173819326117931051185"
        "4807446237996274956735188575272489122793818301194912983367336244"
        "0656643086021394946395224737190702179860943702770539217176293176"
        "7523846748184676694051320005681271452635608277857713427577896091"
        "7363717872146844090122495343014654958537105079227968925892354201"
        "9956112129021960864034418159813629774771309960518707211349999998"
        "3729780499510597317328160963185950244594553469083026425223082533"
        "4468503526193118817101000313783875288658753320838142061717766914"
        "7303598253490428755468731159562863882353787593751957781857780532"
        "1712268066130019278766111959092164201989380952572010654858632788"
        "6593615338182796823030195203530185296899577362259941389124972177"
        "5283479131515574857242454150695950829533116861727855889075098381"
        "7546374649393192550604009277016711390098488240128583616035637076"
        "60104710181943"
    };
    int32_t matchCount{ 0 };
    for (int32_t i{ 2 }; i < piStr.length(); i++)
    {
        if (piStr[i] == actualPiStr[i])
        {
            matchCount++;
        }
        else
        {
            break;
        }
    }
    std::cout << "Matched " << matchCount << " digits" << std::endl;
    return 0;
}

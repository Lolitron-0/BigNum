#include <BigNum/BigNum.hpp>
#include <chrono>
#include <iostream>
#include <string>

using namespace bignum::literals;

int main()
{
    bignum::BigNum::setMinimalPrecision(200);
    bignum::BigNum pi{ 1103 };
    bignum::BigNum koeff{
        "0."
        "000288585565222547709172878017387960020114207096291592301433869959798129268128172031190773"
        "907627311819760231373580433077650224433436557644569461100193265980171699463864080707191665"
        "299449138078314878190280605970813510043929095928346498261099361012323068790848347970714071"
        "771109366562547210208753239752676193705417109750394618843101849863963349669369605201052945"
        "970785751498895527365985379935639916028741385651851845872667037043269876092300062085057253"
        "033963252448031951528030118695788799717502003670490202079075454517141005553601027123850335"
        "395574876537511915842360456191349243498698504774725987467784952979460767730991245833804396"
        "827292284438199048483350511178683567931193900267933896436255565823619637632790476038988695"
        "950875153174446278038080141251714010636214676603226764077691674231978552545740605445737546"
        "183569010605633318293989212947161612564615797986466737565975497788488094116539219668241007"
        "879201090528348709957720759179744333788576326279251304379383408153897089876946407847814552"
        "152423599397451070189447258270847520986687789828431132603605644679344793437582195901135607"
        "700873126416745872217470205135271288036737078206209955370383254467669900581605333520597527"
        "85182499851622972409732097338344800670719242108265486470206121491"};
    bignum::BigNum numerator;
    bignum::BigNum denominator;
    auto start{ std::chrono::high_resolution_clock::now() };
    for (bignum::BigNum k{ 1 }; k < 20; k = k + 1)
    {
        numerator = (4 * k).factorial() * (1103 + 26390_BN * k);
        denominator = bignum::BigNum::pow(k.factorial(), 4) *
                      bignum::BigNum::pow(396_BN, 4 * k);
        pi = pi + (numerator / denominator);
    }
    pi = pi * koeff;
    pi = pi.inverse();
    auto stop{ std::chrono::high_resolution_clock::now() };
    auto duration{ std::chrono::duration_cast<std::chrono::milliseconds>(
        stop - start) };
    std::cout << "Took " << duration.count() << " milliseconds"
              << std::endl;
    auto piStr{ (std::string)pi };
    auto actualPiStr{
        "3."
        "1415926535897932384626433832795028841971693993751058209749445923"
        "0781640628620899862803482534211706798214808651328230664709384460"
        "9550582231725359408128481117450284102701938521105559644622948954"
        "9303819644288109756659334461284756482337867831652712019091456485"
        "6692346034861045432664821339360726024914127372458700660631558817"
        "4881520920962829254091715364367892590360011330530548820466521384"
        "1469519415116094330572703657595919530921861173819326117931051185"
        "4807446237996274956735188575272489122793818301194912983367336244"
        "0656643086021394946395224737190702179860943702770539217176293176"
        "7523846748184676694051320005681271452635608277857713427577896091"
        "7363717872146844090122495343014654958537105079227968925892354201"
        "9956112129021960864034418159813629774771309960518707211349999998"
        "3729780499510597317328160963185950244594553469083026425223082533"
        "4468503526193118817101000313783875288658753320838142061717766914"
        "7303598253490428755468731159562863882353787593751957781857780532"
        "1712268066130019278766111959092164201989380952572010654858632788"
        "6593615338182796823030195203530185296899577362259941389124972177"
        "5283479131515574857242454150695950829533116861727855889075098381"
        "7546374649393192550604009277016711390098488240128583616035637076"
        "60104710181943"
    };
    int32_t matchCount{ 0 };
    for (int32_t i{ 2 }; i < piStr.length(); i++)
    {
        if (piStr[i] == actualPiStr[i])
        {
            matchCount++;
        }
        else
        {
            break;
        }
    }
    std::cout << "Matched " << matchCount << " digits" << std::endl;
    return 0;
}
